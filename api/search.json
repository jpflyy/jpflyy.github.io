[{"id":"7bb7fc64b6abbcc4ecc3eadbe6fac18b","title":"Attention-Is-All-You-Need","content":"原文链接：Attention Is All You Need\r\nTransformer模型结构\r\nTransformer模型遵循encoder-decoder架构，为编码器和解码器使用堆叠的自注意层和逐点全连接的层。   --&gt;\r\n编码器与解码器的堆叠\r\n编码器由N=6个相同的层堆叠组成，每层有两个子层，一种是多头自注意力机制，另一种是简单的位置全连接前馈网络，层内与层间均使用了残差连接。即每个子层的输出可表示为，其中是本层实现的函数。\r\n解码器也由N=6个相同的层堆叠组成，除了编码器中出现的两层，还引入了新的一层，对来自编码器的输出执行多头关注。每个子层周围仍使用残差连接，然后进行层规范化，作者还修改了解码器中的自注意子层，以防止当前位置对后续位置的影响。这种掩蔽，结合输出嵌入偏移一个位置，确保了位置i的预测只能依赖于位置小于i的已知输出。\r\n注意力\r\n注意力函数描述为将查询(query)和一组键值对(key-value)映射到输出，查询、键、值、输出都是向量。输出是值的加权计算，利用查询与键计算分配给每个值的权重。   --&gt;\r\n按比例缩小的点积注意力（Scaled Dot-Product Attention）\r\n\r\n为原始单词输入\r\n   本质上都是将输入分别与一个可训练矩阵做乘积，从而提升模型的泛化能力\r\n：若不与可训练矩阵相乘，则，向量1与向量2的转置做内积的大小意味着两个向量方向的相近程度，内积越大，两个向量方向越一致，以此来描述两个向量的相似程度。的第行与的第列内积值越大，表示第个查询更关注第个值\r\n：为向量的纬度，假设向量query与key中元素都是相互独立且均值为0，方差为1的随机变量，则两向量内积后均值为0，方差为。将除以为了保持的均值为0，方差为1\r\n将权重归一化到[0,1]之间\r\n多头注意力（Multi-Head Attention）\r\n\r\n通过个不同的权重矩阵来分别计算Scaled Dot-Product Attention，每组权重矩阵不同他们的关注点也有所不同，每个头计算出的结果拼接后与总的权重矩阵相乘来决定每一个头的关注程度。\r\n对投影时，作者将每个token由维投影到维，将每个头的计算结果拼接后经投影回维\r\n注意力在Transformer中的应用\r\n在“编码解码注意力层”中，查询来自上一层的解码器，记忆的键和值来自编码器的输出，这使得解码器中的每个位置都能处理输入序列中的所有位置\r\n编码器包含自注意力层，自注意力层中，查询、键、值都是相同的，都来自编码器上一层的输出。编码器中的每个位置可以处理编码器先前层中的所有位置。\r\n解码器中的自注意力层允许解码器中的每个位置处理解码器中该位置前的所有位置。解码器自注意力层通过设置mask一是去除掉各种padding在训练过程中的影响，二是将输入进行遮盖，避免解码器看到后面要预测的东西，来保持回归特性（使中下标满足的值取0，即第i个单词不应注意到排在它后边的单词，同时padding部分也不应该去注意）\r\n前馈网络（Position-wise feed-forward networks）\r\n\r\n每一层经过注意力后，还要经过一个FNN，结构为线性-&gt;Relu-&gt;线性。目的是提供非线性空间变换，提高模型的表现能力。\r\n位置编码（Positional Encoding）\r\n \r\npos表示位置，i表示给向量的第几维编码，位置编码得到的向量与embedding得到的向量纬度是一致的。位置信息编码位于encoder和decoder的Embedding之后，每个block之前。Positional Encoding是transformer的特有机制，弥补了注意力机制无法利用序列位置信息的缺点。Positional Embedding的结果可以直接叠加于Embedding之上，使得每个符号的位置信息(Positional Encoding)和它的语义信息(Embedding)充分融合，并被传递到后续所有经过复杂变换的序列表达中去。\r\n","slug":"Attention-Is-All-You-Need","date":"2022-03-21T12:37:39.000Z","categories_index":"论文","tags_index":"Transformer","author_index":"JPFLY"}]